@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JS
@inject IStringLocalizer<Global> L


<MudCard>
    <MudCardHeader Class="mud-theme-primary">
        <CardHeaderContent >
            <MudText Typo="Typo.h6">Download ML pipeline</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @if (Model == null)
        {
            <DataLoaderSpinner />
        }
        else
        {
            <MudStack>
                <MudButton OnClick="@DownloadModel" 
                    Variant="Variant.Filled" 
                    StartIcon="@Icons.Filled.CloudDownload"
                    Color="Color.Secondary">
                    Download model
                </MudButton>
            </MudStack>
        }
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GetModelResponseDto Model
    { 
        get
        {
            return _model;
        } 
        set
        {
            _model = value;
            StateHasChanged();
        } 
    }
    private GetModelResponseDto _model;
    private async void DownloadModel()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.GetModelDownload(new GetAutoMlModelRequestDto { TrainingId = Model.Model.TrainingId, AutoMl = Model.Model.ID });

            if (apiResponse.IsSuccessStatusCode)
            {
                GetAutoMlModelResponseDto file = Newtonsoft.Json.JsonConvert.DeserializeObject<GetAutoMlModelResponseDto>(apiResponse.Result.ToString());
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                var stream = new MemoryStream(file.Content);
                using var streamRef = new DotNetStreamReference(stream: stream);
                await JS.InvokeVoidAsync("downloadFileFromStream", file.Name, streamRef);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
