@inject IViewNotifier viewNotifier
@inject IStringLocalizer<Global> L
@inject IApiClient apiClient
@inject IDatasetPreviewWorker previewWorker
@using Microsoft.Data.Analysis

@if ((_datasetFrame == null) && (_datasetReadError == false))
{
        <DataLoaderSpinner />
}
else
{
    <MudStack>
        <MudGrid>
            <MudItem xs="3" sm="3" md="3">
                <MudCheckBox @bind-Checked="@UseHeader" Label="@L["Use header"]"></MudCheckBox>
                <MudNumericField @bind-Value="@StartRow" Label="@L["Start row"]" Variant="Variant.Text" Min="1" />
            </MudItem>
            <MudItem xs="3" sm="3" md="3">
                <MudSelect T="string" Label="@L["Column seperator"]" AnchorOrigin="Origin.BottomCenter" @bind-Value="@Delimiter">
                    <MudSelectItem Value="@("comma")" >@(L["Comma \",\""])</MudSelectItem>
                    <MudSelectItem Value="@("semicolon")" >@(L["Semicolon \";\""])</MudSelectItem>
                    <MudSelectItem Value="@("space")">@(L["Space"])</MudSelectItem>
                    <MudSelectItem Value="@("tab")">@(L["Tab"])</MudSelectItem>
                </MudSelect>
                <MudSelect T="string" Label="@L["Encoding"]" AnchorOrigin="Origin.BottomCenter" @bind-Value="@DatasetEncoding">
                    <MudSelectItem Value="@("utf-8")" >@(L["UTF-8"])</MudSelectItem>
                    <MudSelectItem Value="@("latin-1")" >@(L["latin-1"])</MudSelectItem>
                    <MudSelectItem Value="@("utf-16")" >@(L["UTF-16"])</MudSelectItem>
                    <MudSelectItem Value="@("utf-32")" >@(L["UTF-32"])</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="3" sm="3" md="3">
                <MudTextField Mask="@(new RegexMask(@"^.{1,1}$"))" Label="@L["Escape character"]" @bind-Value="@EscapeCharacter"  Variant="@Variant.Text" />
                    <MudTextField Mask="@(new RegexMask(@"^.{1,1}$"))" Label="@L["Decimal character"]" @bind-Value="@DecimalCharacter" Variant="@Variant.Text" />
            </MudItem>
            <MudItem xs="3" sm="3" md="3">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@SaveConfiguration">@L["Save"]</MudButton>
            </MudItem>
        </MudGrid>
        @if (_datasetReadError == true)
        {
            <MudText Typo="Typo.body2">@L["Could not read dataset successfully, change configuration"]</MudText>
        }
        else
        {
             <MudTable Items="@_datasetFrame.Rows" style="width:stretch" class="mat-elevation-z5" FixedHeader="true" Dense="true" CustomHeader="true">
                <HeaderContent>
                    <MudTHeadRow>
                        <MudTh></MudTh>
                        @foreach (var item in _datasetFrame.Columns)
                        {
                            @if (UseHeader == true)
                            {
                                <MudTh>@item.Name</MudTh>
                            }
                            else
                            {
                                <MudTh Style="background-color: gray">@item.Name</MudTh>
                            }
                        }
                    </MudTHeadRow>
                    <MudTHeadRow>
                        <MudTh>@L["Datatype"]</MudTh>
                        @if (_datasetFrame.Columns.Count == _dataset.Dataset.Schema.Count)
                        {
                            @foreach (var item in _datasetFrame.Columns)
                                {
                                    <MudTh>
                                    <MudSelect T="string" Value="@(_dataset.Dataset.Schema[item.Name].DatatypeSelected.ID == null ? _dataset.Dataset.Schema[item.Name].DatatypeDetected.ID : _dataset.Dataset.Schema[item.Name].DatatypeSelected.ID)" ValueChanged="@((e) => { _dataset.Dataset.Schema[item.Name].DatatypeSelected.ID = e; SaveColumnConfiguration(item.Name, _dataset.Dataset.Schema[item.Name].RoleSelected.ID, e); })">
                                            @foreach (var datatype in _dataset.Dataset.Schema[item.Name].DatatypesCompatible)
                                            {
                                                <MudSelectItem Value="@datatype.ID">
                                                    <MudText Typo="Typo.body2">@L[datatype.Properties.ContainsKey("skos:prefLabel") ? datatype.Properties["skos:prefLabel"] : ""]</MudText>
                                                </MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudTh>
                                }
                        }
                        else
                        {
                            <MudText Typo="Typo.body2">@L["Datatype analysis incompatible with current dataset configuration, save current configuration to start new analysis"]</MudText>
                        }
                    </MudTHeadRow>
                    <MudTHeadRow>
                        <MudTh>@L["Role"]</MudTh>
                        @if (_datasetFrame.Columns.Count == _dataset.Dataset.Schema.Count)
                        {
                            @foreach (var item in _datasetFrame.Columns)
                            {
                                <MudTh>
                                    <MudSelect T="string" Value="@(_dataset.Dataset.Schema[item.Name].RoleSelected.ID == null ? ":none" : _dataset.Dataset.Schema[item.Name].RoleSelected.ID)" ValueChanged="@((e) => { _dataset.Dataset.Schema[item.Name].RoleSelected.ID = e == ":none" ?  null : e; SaveColumnConfiguration(item.Name, e, _dataset.Dataset.Schema[item.Name].DatatypeSelected.ID); })">
                                    
                                        <MudSelectItem Value="@(":none")">
                                            <MudText Typo="Typo.body2">@L["none"]</MudText>
                                        </MudSelectItem>
                                        @foreach (var role in _dataset.Dataset.Schema[item.Name].RolesCompatible)
                                        {
                                            <MudSelectItem Value="@role.ID">
                                                <MudText Typo="Typo.body2">@L[role.Properties.ContainsKey("skos:prefLabel") ? role.Properties["skos:prefLabel"] : ""]</MudText>
                                            </MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudTh>
                            }
                        }
                        else
                        {
                            <MudText Typo="Typo.body2">@L["Roles analysis incompatible with current dataset configuration, save current configuration to start new analysis"]</MudText>
                        }
                    </MudTHeadRow>
                </HeaderContent>
                <RowTemplate>

                    @if (true) 
                    {
                        <MudTd></MudTd>
                        @foreach (var item in context)
                        {
                            @if (_index < StartRow)
                            {
                                <MudTd Style="background-color: gray"> @item </MudTd>
                            }
                            else
                            {
                                <MudTd>@item</MudTd>
                            }

                        }
                        IncreaseIndex();
                    }
   
                </RowTemplate>
            </MudTable>
        }
        
    </MudStack>
}

@code {

    public void IncreaseIndex()
    {
        _index++;
    }

    [Parameter]
    public string DatasetData
    {
        get
        {
            return _datasetData;
        }
        set
        {
            _datasetData = value;
            ReloadDataFrame();
        }
    }
    private string _datasetData;


    private DataFrame _datasetFrame;
    private int _index = 1;

    [Parameter]
    public GetDatasetResponseDto Dataset
    { 
        get
        {
            return _dataset;
        } 
        set
        {
            _dataset = value;
            ReloadDataFrame();
        } 
    }
    private GetDatasetResponseDto _dataset;

    public bool UseHeader
    { 
        get
        {
            return Dataset.Dataset.FileConfiguration["use_header"];
        } 
        set
        {
            if (value != null)
            {
                Dataset.Dataset.FileConfiguration["use_header"] = value;
                _index = 1;
            }
        } 
    }

    public int StartRow
    { 
        get
        {
            return (int)Dataset.Dataset.FileConfiguration["start_row"];
        } 
        set
        {
            if (value != null)
            {
                Dataset.Dataset.FileConfiguration["start_row"] = value;
                _index = 1;
            }


        } 
    }

    public string Delimiter
    { 
        get
        {
            return Dataset.Dataset.FileConfiguration["delimiter"];
        } 
        set
        {
            if (value != null)
            {
                Dataset.Dataset.FileConfiguration["delimiter"] = value;
                _rowIndex = 0;
                _index = 1;
                ReloadDataFrame();
            }
        } 
    }
    private string _delimiter;
    private int _rowIndex = 0;
    public string EscapeCharacter
    { 
        get
        {
            return Dataset.Dataset.FileConfiguration["escape_character"];
        } 
        set
        {
            if (value != null)
            {
                Dataset.Dataset.FileConfiguration["escape_character"] = value;
            }
        } 
    }

    public string DecimalCharacter
    { 
        get
        {
            return Dataset.Dataset.FileConfiguration["decimal_character"];
        } 
        set
        {
            if (value != null)
            {
                Dataset.Dataset.FileConfiguration["decimal_character"] = value;
            }
        } 
    }

    public string DatasetEncoding
    {
        get
        {
            return Dataset.Dataset.FileConfiguration["encoding"];
        }
        set
        {
            if (value != null)
            {
                Dataset.Dataset.FileConfiguration["encoding"] = value;
                ReloadDataFrame();
            }
        }

    }
    private string searchString = "";

    private bool _isSavingAllowed = true;
    private bool _datasetReadError = false;

    private void ReloadDataFrame()
    {
        try
        {
            if (DatasetData != null)
            {
              
                _datasetFrame = DataFrame.LoadCsv(DatasetData, separator: Dataset.Dataset.GetDelimiter(), encoding: Dataset.Dataset.GetEncoding(), numRows: 20);
                _datasetFrame.FillNulls("NaN", true);
                if(_datasetFrame.Rows.Count == 0){
                    _isSavingAllowed = false;
                    _datasetReadError = true;
                } else {
                    _isSavingAllowed = true;
                    _datasetReadError = false;
                }

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _datasetReadError = true;
            _isSavingAllowed = false;
            StateHasChanged();
            viewNotifier.Show("Data can´t be read using column delimiter:" + ex.Message, ViewNotifierType.Error, L["Operation Failed"]);
        }    
        
    }

    private async void SaveConfiguration()
    {
        if (_isSavingAllowed == false)
        {
            viewNotifier.Show(L["File configuration can not be saved, incompatible delimiter or encoding"], ViewNotifierType.Error, L["Operation Failed"]);
            return;
        }
        previewWorker.UpdateDatasetFileConfiguration(Dataset);
    }
    private async void SaveColumnConfiguration(string column, string role, string datatype)
    {
        previewWorker.UpdateDatasetColumnSchemaConfiguration(new SetDatasetColumnSchemaConfigurationRequestDto() {
            DatasetId = Dataset.Dataset.Id,
            Column = column,
            SelectedDatatype = datatype,
            SelectedRole = role
        });
    }
}
