@page "/datasets/{id}/models"
@inject IStringLocalizer<Global> L
@inject ISnackbar Snackbar
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@attribute [Authorize]

@if (!string.IsNullOrEmpty(_pageTitle))
{
    <TopSection>
        <Breadcrumbs>
            <Breadcrumb Title="Datasets" Link="/datasets" />
            <Breadcrumb Title="@_pageTitle" Link="@("/datasets/" + Id)"/>
            <Breadcrumb Title="Models" />
        </Breadcrumbs>
    </TopSection>
}
<TopSection>
    <Breadcrumbs>
        <Breadcrumb Title="Models" />
    </Breadcrumbs>
</TopSection>

<MudStack AlignItems="AlignItems.Center" Row="true" Class="mb-2">
    <MudIcon Size="Size.Large" Icon="@Icons.Filled.Lightbulb" Color="@Color.Secondary"/>
    <MudText Typo="Typo.h4">Models</MudText>
</MudStack>

<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <MudCard Elevation="5">
            <MudCardHeader Style="border-bottom-style: inset; border-bottom-width: 1px;">
                <CardHeaderContent >
                    <MudText Typo="Typo.h6">Overview</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudPaper Height="100px" Elevation="0">
                    @if (true)
                    {
                        <DataLoaderSpinner />
                    }
                    else
                    {
                        <MudGrid>
                            <MudItem xs="3" sm="3" md="3">
                            </MudItem>
                            <MudItem xs="3" sm="3" md="3">
                            </MudItem>
                            <MudItem xs="3" sm="3" md="3">
                            </MudItem>
                            <MudItem xs="3" sm="3" md="3">
                            </MudItem>
                        </MudGrid>
                    }
                </MudPaper>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="12" md="12">
        <AllModels Models="_models" />
    </MudItem>
</MudGrid>

@code{
    [Parameter]
    public string Id { get; set; }
    private GetModelsResponseDto _models;
    private GetDatasetResponseDto _dataset;
    private string _pageTitle;
    protected override async Task OnInitializedAsync()
    {
        await LoadModels();
    }
    private async Task LoadModels()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.GetModels(new GetModelsRequestDto() { DatasetIdentifier = Id});

            if (apiResponse.IsSuccessStatusCode)
            {
                _models = Newtonsoft.Json.JsonConvert.DeserializeObject<GetModelsResponseDto>(apiResponse.Result.ToString());
                apiResponse = await apiClient.GetDataset(new GetDatasetRequestDto() { Identifier = Id});

                if (apiResponse.IsSuccessStatusCode)
                {
                    _dataset = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetResponseDto>(apiResponse.Result.ToString());
                    _pageTitle = "Dataset " + _dataset.Name;
                    StateHasChanged();
                    StateHasChanged();
                    viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                }
                else
                {
                    viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                }
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}