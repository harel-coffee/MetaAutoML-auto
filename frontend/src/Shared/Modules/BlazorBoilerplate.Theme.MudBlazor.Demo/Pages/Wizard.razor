@page "/wizard/{id}"
@inject IStringLocalizer<Global> L
@inject ISnackbar Snackbar
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject NavigationManager NavManager
@attribute [Authorize]

<TopSection>
    <Breadcrumbs>
        <Breadcrumb Title="Wizard" />
    </Breadcrumbs>
</TopSection>

<PageTitle>Datasets</PageTitle>
<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <MudCard>
            <MudCardHeader Class="mud-theme-primary">
                <CardHeaderContent >
                    <MudText Typo="Typo.h6">Overview</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (_dataset == null)
                {
                    <DataLoaderSpinner />
                }
                else
                {
                    <MuddyWizard WizardFinished="@OnWizardFinished">
                        <MuddyWizardPanel Title="Dataset preparation">
                            @switch (_dataset.Type.ID)
                            {
                                case ":tabular":
                                <DisplayTabularDataset Dataset="@_dataset" @bind-StartAutoMlRequest="@_automlRequest"/>
                                    break;
                                case ":image":
                                <DisplayImageDataset Dataset="@_dataset" @bind-StartAutoMlRequest="@_automlRequest"/>
                                    break;
                            }
                        </MuddyWizardPanel>
                        <MuddyWizardPanel Title="Configuration">
                            <TaskConfiguration Dataset="@_dataset" @bind-StartAutoMlRequest="@_automlRequest" />
                        </MuddyWizardPanel>
                    </MuddyWizard>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="12" md="12">
    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public string Id { get; set; }

    private GetDatasetResponseDto _dataset;
    private string _pageTitle = "";
    private StartAutoMLRequestDto _automlRequest;

    protected async override void OnInitialized()
    {
        _automlRequest = new StartAutoMLRequestDto();
        await LoadDataset();
    }
    private async Task LoadDataset()
    {
        try
        {
            GetDatasetRequestDto datasetRequest = new GetDatasetRequestDto()
                {
                    Identifier = Id
                };
            ApiResponseDto apiResponse = await apiClient.GetDataset(datasetRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _dataset = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetResponseDto>(apiResponse.Result.ToString());
                _pageTitle = "Dataset " + _dataset.Name;
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
    private async void OnWizardFinished()
    {
        try
        {
            StartAutoMLResponseDto automlResponse;
            ApiResponseDto apiResponse = await apiClient.StartAutoML(_automlRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                automlResponse = Newtonsoft.Json.JsonConvert.DeserializeObject<StartAutoMLResponseDto>(apiResponse.Result.ToString());
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                NavManager.NavigateTo("/trainings/" + automlResponse.TrainingId);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
