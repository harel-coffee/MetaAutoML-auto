@inject IStringLocalizer<Global> L
@using System
@using System.IO;
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier


<MatDialog @bind-IsOpen="IsOpen">
    <MatDialogTitle>Add Dataset</MatDialogTitle>
    <MatDialogContent>
        <MatSelect Label="Pick a Dataset Type" TValue="string" ValueChanged="@OnDatasetSelectedChanged">
            @foreach (var datasetInformation in _datasetTypes.DatasetTypes)
            {
            <MatOptionString Value="@datasetInformation.ID">@datasetInformation.Properties["skos:prefLabel"]</MatOptionString>
            }
        </MatSelect>

        <MatTextField @bind-Value="@_fileUpload.FileName" Label="File Name" Disabled="true"></MatTextField>
        <MatTextField @bind-Value="@_fileUpload.DatasetName" Label="Dataset Name"></MatTextField>

        <MatFileUpload OnChange="@FilesReady" Label="Choose File"></MatFileUpload>
        
        <MatProgressBar Indeterminate="true" Closed="@IsLoaderClosed"></MatProgressBar>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@Close">Close</MatButton>
        <MatButton OnClick="@Upload" Disabled="@IsUploading">Upload</MatButton>
    </MatDialogActions>
</MatDialog>

@code {

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    private GetDatasetTypesResponseDto _datasetTypes = new GetDatasetTypesResponseDto();

    [Parameter]
    public EventCallback OnUploadCompletedCallback { get; set; }

    private FileUploadRequestDto _fileUpload = new FileUploadRequestDto();

    private bool IsUploading { get; set; } = false;
    private bool IsLoaderClosed { get; set; } = true;

    private void OnDatasetSelectedChanged(string value)
    {
        _fileUpload.DatasetType = (string)value;
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            ApiResponseDto apiResponse = new ApiResponseDto();
            apiResponse = await apiClient.GetDatasetTypes();
            if (apiResponse.IsSuccessStatusCode)
            {
                _datasetTypes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDatasetTypesResponseDto>(apiResponse.Result.ToString());
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
            await Close();
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async Task Close()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    private async Task FilesReady(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            using var stream = e.File.OpenReadStream((512000 * 2 * 400));
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var content = ms.ToArray();

            _fileUpload.FileName = file.Name;
            _fileUpload.DatasetName = file.Name;
            _fileUpload.Content = content;


        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
    private async Task Upload()
    {
        try
        {
            if (string.IsNullOrEmpty(_fileUpload.DatasetName))
            {
                viewNotifier.Show("Please enter a dataset name first!", ViewNotifierType.Error, L["Operation Failed"]);
                return;
            }
            if (string.IsNullOrEmpty(_fileUpload.DatasetType))
            {
                viewNotifier.Show("Please select a dataset type first!", ViewNotifierType.Error, L["Operation Failed"]);
                return;
            }
            if (string.IsNullOrEmpty(_fileUpload.FileName))
            {
                viewNotifier.Show("Please select a file first!", ViewNotifierType.Error, L["Operation Failed"]);
                return;
            }

            IsUploading = true;
            IsLoaderClosed = false;
            StateHasChanged();
            ApiResponseDto apiResponse = new ApiResponseDto();
            apiResponse = await apiClient.UploadDataset(_fileUpload);
            if (apiResponse.IsSuccessStatusCode)
            {
                await OnUploadCompletedCallback.InvokeAsync();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
            IsUploading = false;
            IsLoaderClosed = true;
            StateHasChanged();
            await Close();
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
