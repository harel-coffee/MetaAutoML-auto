syntax = "proto3";

/* 
AutoML Adapter Service implementation. Service provide functionality to interact with an AutoML adapter.
*/
service AdapterService {

    /* Request for the adapter to start a new training session */
    rpc StartAutoMl(StartAutoMlRequest) returns (StartAutoMlResponse) {}

    /* Retrieve an available status messages about a specific training session */
    rpc GetAutoMlStatus(GetAutoMlStatusRequest) returns (GetAutoMlStatusResponse) {}

    /* Request the adapter to perform a probability prediction on a previously ended training session, using the waiting AdapterManager from the training session */
    rpc ExplainModel(ExplainModelRequest) returns (ExplainModelResponse) {}

    /* Request the adapter to perform a model prediction using a new uploaded live dataset */
    rpc PredictModel(PredictModelRequest) returns (PredictModelResponse) {}
}


message StartAutoMlRequest {
    string trainingId = 1;                          //Unique training id generated when inserting a new training document into MongoDB (xxxx_xxxx_xxxx_xxxx)
    string datasetId = 2;                           //Unique dataset id generated when inserting a new dataset document into MongoDB (xxxx_xxxx_xxxx_xxxx)
    string userId = 3;                              //Unique user id generated by the controller on the create new user request from the frontend. Linked to a AspNetUser saved within the MS Sql database of the frontend (xxxx_xxxx_xxxx_xxxx)
    string DatasetPath = 4;                         //The absolute path to the dataset files, or absolute folder path id the dataset consists of multiple files (example: images) (app/app-data/datasets/USER_ID/DATASET_ID/FILE)
    StartAutoMlConfiguration configuration = 5;     //The specific configuration for the training session
    string datasetConfiguration = 6;                //The dataset configuration json describing how to read the dataset and its composition
}
message StartAutoMlConfiguration {
    string task = 1;                                //The task selected during the wizard process (:tabular_classification)
    string target = 2;                              //The target selected during the wizard process (Survived)
    int32 runtimeLimit = 4;                         //The max amount of numbers of minutes the AutoML search process will try to find a model (3)
    string metric = 5;                              //The metric selected during the wizard process (:accuracy)
}

message StartAutoMlResponse {
    string sessionId = 1;                           //Unique session id used to identify a running training session within the adapter, generated by the adapter before starting the AutoML solution search process (xxxx_xxxx_xxxx_xxxx)
}

message GetAutoMlStatusRequest {    
    string sessionId = 1;                           //Unique session id used to identify a running training session within the adapter, generated by the adapter before starting the AutoML solution search process (xxxx_xxxx_xxxx_xxxx)
}

message GetAutoMlStatusResponse {
	AdapterReturnCode returnCode = 1;               //The return code describes what type of status message was received (ADAPTER_RETURN_CODE_SUCCESS)
	string statusUpdate = 2;                        //The status message the AutoML solution wrote on the console (Starting trial #1)
	string path = 3;                                //The absolute path to the model zip containing the model and executable python scipts (app/app-data/trainings/USER_ID/DATASET_ID/TRAINING_ID/export/autokeras.zip)
	float testScore = 4;                            //The test score computed by testing the model with the test dataset (0.80)
    float predictionTime = 5;                       //The prediction time in milliseconds is the average time the model takes to make one prediction (12)
    string mlLibrary = 6;                           //The ML library used by the found model (:keras_lib)
    string mlModelType = 7;                         //The ML model type that the found model is composed of (:neural_network)
}

message ExplainModelRequest {
    string data = 1;                                //The JSON string of data used to perform predictions with the found model
    string processJson = 2;                         //The process JSON describing the configuration the model will use
    string sessionId = 3;                           //Unique session id used to identify a running training session within the adapter, generated by the adapter before starting the AutoML solution search process (xxxx_xxxx_xxxx_xxxx)
}

message ExplainModelResponse {
    string probabilities = 1;                       //The probabilies found, using the specific model
}

message PredictModelRequest {
    string processJson = 1;                         //The process JSON describing the configuration the model will use
}

message PredictModelResponse {        
    string resultPath = 1;                          //The absolute path where the prediction results are persisted
}

enum AdapterReturnCode {
	ADAPTER_RETURN_CODE_UNKNOWN = 0;                //Return code for unknown behavior, used whenever any unforseen behavior is recognized
	ADAPTER_RETURN_CODE_SUCCESS = 1;                //Return code used when the AutoML search process concludes to inform the controller this will be the final message
	ADAPTER_RETURN_CODE_PENDING = 2;                //Return code used for messages during the AutoML search process is running but no status messages are available, informs the controller that more messages are coming
	ADAPTER_RETURN_CODE_STATUS_UPDATE = 3;          //Return code used for messages during the AutoML search process is running, informs the controller that more messages are coming
	ADAPTER_RETURN_CODE_ERROR = 100;                //Return code for error behaviors
}